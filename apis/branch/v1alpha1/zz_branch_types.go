/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BranchObservation struct {

	// An etag representing the Branch object.
	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// A string representing a branch reference, in the form of refs/heads/<branch>.
	Ref *string `json:"ref,omitempty" tf:"ref,omitempty"`

	// A string storing the reference's HEAD commit's SHA1.
	Sha *string `json:"sha,omitempty" tf:"sha,omitempty"`
}

type BranchParameters struct {

	// The GitHub repository name.
	// +crossplane:generate:reference:type=github.com/upbound/provider-github/apis/repository/v1alpha1.Repository
	// +kubebuilder:validation:Optional
	Repository *string `json:"repository,omitempty" tf:"repository,omitempty"`

	// Reference to a Repository in repository to populate repository.
	// +kubebuilder:validation:Optional
	RepositoryRef *v1.Reference `json:"repositoryRef,omitempty" tf:"-"`

	// Selector for a Repository in repository to populate repository.
	// +kubebuilder:validation:Optional
	RepositorySelector *v1.Selector `json:"repositorySelector,omitempty" tf:"-"`

	// The branch name to start from. Defaults to main.
	// +kubebuilder:validation:Optional
	SourceBranch *string `json:"sourceBranch,omitempty" tf:"source_branch,omitempty"`

	// The commit hash to start from. Defaults to the tip of source_branch. If provided, source_branch is ignored.
	// +kubebuilder:validation:Optional
	SourceSha *string `json:"sourceSha,omitempty" tf:"source_sha,omitempty"`
}

// BranchSpec defines the desired state of Branch
type BranchSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BranchParameters `json:"forProvider"`
}

// BranchStatus defines the observed state of Branch.
type BranchStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BranchObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Branch is the Schema for the Branchs API. Creates and manages branches within GitHub repositories.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,github}
type Branch struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BranchSpec   `json:"spec"`
	Status            BranchStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BranchList contains a list of Branchs
type BranchList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Branch `json:"items"`
}

// Repository type metadata.
var (
	Branch_Kind             = "Branch"
	Branch_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Branch_Kind}.String()
	Branch_KindAPIVersion   = Branch_Kind + "." + CRDGroupVersion.String()
	Branch_GroupVersionKind = CRDGroupVersion.WithKind(Branch_Kind)
)

func init() {
	SchemeBuilder.Register(&Branch{}, &BranchList{})
}
